#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Return current ssh connections and sshd configuration
#

use warnings;
use strict;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';
require '/usr/libexec/nethserver/api/lib/auth_functions.pl';

use JSON;
use esmith::ConfigDB;
my %ret;

my $groupAdmins = get_adminGroup();
my $is_root = ($< == 0);
my $input = readInput();
my $cmd = $input->{'action'};

if($cmd eq 'hints') {
    my %r;
    if (( grep /^$groupAdmins$/, get_groups()) or ($is_root)) {
        chomp ($r{'hints'} = `sudo /sbin/e-smith/db configuration getprop cockpit.socket ShowHints`);
    } else {
        $r{'hints'} = 'disabled';
    }
    print encode_json(\%r);
    exit(0);
} elsif ($cmd eq 'settings') {
    $ret{'status'}{'isAdmin'} = int((grep /^$groupAdmins$/, get_groups()) || $is_root);
    $ret{'status'}{'isRoot'} = int($is_root);
    $ret{'status'}{'canChangePassword'} = 1;

    if (( grep /^$groupAdmins$/, get_groups()) || $is_root) {

    my %smarthost = (
        SmartHostStatus => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostStatus`,
        SmartHostName => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostName`,
        SmartHostPort => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostPort`,
        SmartHostUsername => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostUsername`,
        SmartHostPassword => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostPassword`,
        SmartHostTlsStatus => `sudo /sbin/e-smith/db configuration getprop postfix SmartHostTlsStatus`,
    );
    chomp (%smarthost);

    my @addresses = ();
    chomp (my $email_address = `sudo /sbin/e-smith/db configuration getprop root EmailAddress`); 

    if ($email_address) {
        @addresses = split(",",$email_address);
    }
    my %root = (
        EmailAddress => \@addresses,
        KeepMessageCopy => `sudo /sbin/e-smith/db configuration getprop root KeepMessageCopy`,
        SenderAddress => `sudo /sbin/e-smith/db configuration getprop root SenderAddress`
    );
    chomp (%root);

    my %cockpit = (
        access => `sudo /sbin/e-smith/db configuration getprop cockpit.socket access`,
        LimitAccess => `sudo /sbin/e-smith/db configuration getprop cockpit.socket LimitAccess`,
        ShowHints => `sudo /sbin/e-smith/db configuration getprop cockpit.socket ShowHints`
    );
    chomp (%cockpit);

    my %logrotate = (
        Compression => `sudo /sbin/e-smith/db configuration getprop logrotate Compression`,
        Rotate => `sudo /sbin/e-smith/db configuration getprop logrotate Rotate`,
        Times => `sudo /sbin/e-smith/db configuration getprop logrotate Times`
    );
    chomp (%logrotate);

    $ret{'configuration'}{'smarthost'} = \%smarthost;
    $ret{'configuration'}{'cockpit'} = \%cockpit;
    $ret{'configuration'}{'root'} = \%root;
    $ret{'configuration'}{'logrotate'} = \%logrotate;

    print encode_json(\%ret);
    } else {

        my $nsdc = system("/usr/bin/systemctl status nsdc &>/dev/null");
        my $ldap = system("/usr/bin/systemctl status slapd &>/dev/null");
        if ($nsdc > 0 && $ldap > 0) { # sssd is configured for remote account provider
            $ret{'status'}{'canChangePassword'} = 0; 
        }

        $ret{'configuration'} = undef;
        print encode_json(\%ret);
        exit(0);
    }
} else {
    error();
}